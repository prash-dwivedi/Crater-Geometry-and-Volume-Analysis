#"""
#Scientific Analysis of Crater Dimensions and Ratios
#
#This Python script performs a comprehensive analysis of crater formation 
#characteristics in particle-based simulation data using OVITO's Python API. 
#The code computes key metrics such as:
#1. Surface atom position, crater depth, and pileup height.
#2. Major and minor axes of the crater dimensions.
#3. Crater and projectile volume ratios and their dimensional relationships.
#
#The code is divided into sequential sections:
#- Step 1: Analyze surface geometry to extract crater depth and pileup height.
#- Step 2: Determine the major and minor axes of the crater using interatomic distances.
#- Step 3: Compute projectile-to-crater ratios, including volumetric and dimensional properties.#
#
#Each section is scientifically documented with precise calculations and error handling, 
#making this script suitable for scientific analysis and research publication workflows.
#
#Author: Prashant Dwivedi
## Citation
#If you use this script in your research, please cite the following articles:
#[DOI: 10.1016/j.jnucmat.2024.155289](https://doi.org/10.1016/j.jnucmat.2024.155289)
#[DOI: 10.1016/j.jnucmat.2024.155042](https://doi.org/10.1016/j.jnucmat.2024.155042)
#License: MIT
#"""

# Import necessary libraries
from ovito.data import *
import numpy as np
import json

def modify(frame: int, data: DataCollection):
    """
    Entry point for OVITO's Python pipeline modifier.
    Processes particle data to compute geometric and volumetric properties of the crater.
    """
    # ---------------------------------------------------------
    # Step 1: Surface Analysis - Crater Depth and Pileup Height
    # ---------------------------------------------------------
    if data.particles is None:
        print("[ERROR] No particle data found. Ensure input contains particle data.")
        return

    positions = data.particles['Position']
    if positions is None:
        print("[ERROR] No particle position data found. Check data integrity.")
        return

    # Calculate the surface atom's position by identifying the most frequent z-coordinate
    hist, bin_edges = np.histogram(positions[:, 2], bins=100)  # Histogram of z-coordinates
    surface_atom_position_z = bin_edges[np.argmax(hist)]  # Mode of the z-coordinate histogram

    # Identify the lowest z-coordinate for crater depth analysis
    lowest_atom_position_z = np.min(positions[:, 2])
    depth_of_crater = surface_atom_position_z - lowest_atom_position_z  # Depth of the crater

    # Calculate pileup height using the 7 highest z-coordinates
    highest_7_atom_positions_z = np.sort(positions[:, 2])[-7:]  # Extract top 7 z-values
    average_highest_7_position_z = np.mean(highest_7_atom_positions_z)
    crater_pileup_height = average_highest_7_position_z - surface_atom_position_z

    # Print and store surface analysis results
    print("[INFO] Surface Atom Position (Z):", surface_atom_position_z)
    print("[INFO] Depth of Crater:", depth_of_crater)
    print("[INFO] Crater Pileup Height:", crater_pileup_height)
    data.attributes["Surface_Atom_Position_Z"] = surface_atom_position_z
    data.attributes["Depth_of_Crater"] = depth_of_crater
    data.attributes["Crater_Pileup_Height"] = crater_pileup_height

    # -----------------------------------------------------------
    # Step 2: Crater Geometry - Major and Minor Axes Calculation
    # -----------------------------------------------------------
    max_z = np.max(positions[:, 2])  # Determine the maximum z-coordinate (crater peak)
    print("[INFO] Maximum Z-coordinate:", max_z)

    def calculate_top_atom_distances(positions, max_z, tolerance=3.0):
        """
        Compute distances between atoms near the crater's peak.
        Parameters:
            positions: Particle positions array (N x 3).
            max_z: Maximum z-coordinate.
            tolerance: Height tolerance to filter top atoms.
        Returns:
            Major axis (D1) and minor axis (D2) of the crater.
        """
        # Filter positions based on a z-tolerance around the peak
        z_filtered_positions = positions[positions[:, 2] > max_z - tolerance]

        distances = []
        for i in range(len(z_filtered_positions)):
            for j in range(i + 1, len(z_filtered_positions)):
                distance = np.linalg.norm(z_filtered_positions[i] - z_filtered_positions[j])  # Euclidean distance
                distances.append(distance)

        distances.sort(reverse=True)  # Sort distances in descending order

        D1 = distances[0]  # Largest distance defines the major axis
        D2 = np.mean(distances[1:10])  # Mean of next 9 distances defines the minor axis

        return D1, D2

    # Perform crater axis calculations
    D1, D2 = calculate_top_atom_distances(positions, max_z)
    print(f"[INFO] Major Axis (D1): {D1}")
    print(f"[INFO] Minor Axis (D2): {D2}")

    # Store results for further analysis
    data.attributes["Major_Axis"] = D1
    data.attributes["Minor_Axis"] = D2

    # -------------------------------------------------------
    # Step 3: Crater and Projectile Volume Ratio Calculations
    # -------------------------------------------------------
    # Constants and Attributes
    D_p_Angstrom = 100  # Projectile diameter in Angstroms (10 nm)
    pi = np.pi

    # Extract computed attributes
    D_c1 = data.attributes["Major_Axis"]
    D_c2 = data.attributes["Minor_Axis"]
    H_c = data.attributes["Depth_of_Crater"]

    # Compute the average crater diameter
    D_c = (D_c1 + D_c2) / 2

    # Compute geometric ratios
    ratio_Dc_Dp = D_c / D_p_Angstrom
    ratio_Hc_Dp = H_c / D_p_Angstrom

    # Compute volumes
    V_p = (4 / 3) * pi * (D_p_Angstrom / 2) ** 3  # Volume of the spherical projectile
    V_c = pi * (H_c / 6) * (3 * (D_c / 2) ** 2 + H_c ** 2)  # Approximate volume of the crater
    ratio_Vc_Vp = V_c / V_p

    # Convert to nanometer units for output
    D_p = D_p_Angstrom * 0.1  # Convert to nm
    D_c = D_c * 0.1  # Convert to nm
    D_c1 = D_c1 * 0.1  # Convert to nm
    D_c2 = D_c2 * 0.1  # Convert to nm
    H_c = H_c * 0.1  # Convert to nm
    V_p = V_p * 0.001  # Convert from Å³ to nm³
    V_c = V_c * 0.001  # Convert from Å³ to nm³

    # Prepare results dictionary
    results = {
        "Projectile Diameter (D_p)": round(D_p, 2),
        "Crater Diameter (D_c1)": round(D_c1, 2),
        "Crater Diameter (D_c2)": round(D_c2, 2),
        "Final Diameter (D_c)": round(D_c, 2),
        "Ratio (D_c/D_p)": round(ratio_Dc_Dp, 2),
        "Depth of Crater (H_c)": round(H_c, 2),
        "Ratio (H_c/D_p)": round(ratio_Hc_Dp, 2),
        "Volume of Spherical Projectile (V_p)": round(V_p, 2),
        "Volume of Crater (V_c)": round(V_c, 2),
        "Ratio (V_c/V_p)": round(ratio_Vc_Vp, 2)
    }

    # Convert results to JSON for clarity
    json_results = json.dumps(results, indent=4)
    print("[RESULTS] Crater Analysis Results:\n", json_results)

    # Store results in data attributes
    data.attributes.update(results)
